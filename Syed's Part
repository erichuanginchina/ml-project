{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn import preprocessing\n",
    "import matplotlib.pyplot as plt \n",
    "plt.rc(\"font\", size=14)\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.model_selection import train_test_split\n",
    "import seaborn as sns\n",
    "sns.set(style=\"white\")\n",
    "sns.set(style=\"whitegrid\", color_codes=True)\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_csv(\"clean_formspring_1306.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\syedrusyaidi\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:3: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  This is separate from the ipykernel package so we can avoid doing imports until\n",
      "C:\\Users\\syedrusyaidi\\Anaconda3\\lib\\site-packages\\pandas\\core\\series.py:1292: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  self._set_labels(key, value)\n",
      "C:\\Users\\syedrusyaidi\\Anaconda3\\lib\\site-packages\\IPython\\core\\interactiveshell.py:3326: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  exec(code_obj, self.user_global_ns, self.user_ns)\n",
      "C:\\Users\\syedrusyaidi\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:4: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  after removing the cwd from sys.path.\n",
      "C:\\Users\\syedrusyaidi\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:5: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  \"\"\"\n",
      "C:\\Users\\syedrusyaidi\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:6: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  \n",
      "C:\\Users\\syedrusyaidi\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:7: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  import sys\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>overall_ans</th>\n",
       "      <th>overall_severity</th>\n",
       "      <th>X</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Q: what&amp;#039;s your favorite song? :D&lt;br&gt;A: I ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Q: &lt;3&lt;br&gt;A: &lt;/3 ? haha jk! &lt;33</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Q: &amp;quot;hey angel  you duh sexy&amp;quot;&lt;br&gt;A: R...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Q: (:&lt;br&gt;A: ;(</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Q: ******************MEOWWW*******************...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   overall_ans  overall_severity  \\\n",
       "0            0               0.0   \n",
       "1            0               0.0   \n",
       "2            0               0.0   \n",
       "3            0               0.0   \n",
       "4            0               0.0   \n",
       "\n",
       "                                                   X  \n",
       "0  Q: what&#039;s your favorite song? :D<br>A: I ...  \n",
       "1                     Q: <3<br>A: </3 ? haha jk! <33  \n",
       "2  Q: &quot;hey angel  you duh sexy&quot;<br>A: R...  \n",
       "3                                     Q: (:<br>A: ;(  \n",
       "4  Q: ******************MEOWWW*******************...  "
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_new = df[['post', 'bully1' , 'bully2', 'bully3', 'overall_ans', 'overall_severity']]\n",
    "nobully_ind = np.where(df_new.bully1.isna() & df_new.bully2.isna() & df_new.bully3.isna())[0]\n",
    "df_new['bully1'][np.where(df_new.bully1.isna())[0]] = \"\"\n",
    "df_new['bully2'][np.where(df_new.bully2.isna())[0]] = \"\"\n",
    "df_new['bully3'][np.where(df_new.bully3.isna())[0]] = \"\"\n",
    "df_new['X'] = df_new['bully1']+df_new['bully2']+df_new['bully3']\n",
    "df_new['X'][nobully_ind] = df_new.post.values[nobully_ind]\n",
    "df_new = df_new.drop(columns=['bully1', 'bully2', 'bully3', 'post'])\n",
    "df_new.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "# removing noise from data\n",
    "import re\n",
    "\n",
    "def regex(post):\n",
    "    post = re.sub(r'[a-zA-Z0-9._%+-] + @ + [a-zA-Z0-9.-] + (\\.[a-zA-Z]{2,4})', 'email', post) # removing email\n",
    "    post = re.sub(r'Q\\:\\s', '', post) # removing ques & ans header\n",
    "    post = re.sub(r'A\\:\\s', '', post) # removing ques & ans header\n",
    "    post = re.sub(r'<.*?>', '', post) # removing html tags\n",
    "\n",
    "    post = re.sub(r'[^a-zA-Z0-9]',\" \", post.lower()) # removing punctuation & convert to lower case\n",
    "    post = re.sub('\\s+', ' ', post) # removing tab or more than one consecutive space\n",
    "    post = post.strip()\n",
    "    return post\n",
    "# for i in df_new.post.values[:10]:\n",
    "#     regex(i)\n",
    "\n",
    "# remove only digit token\n",
    "def rmdigit(token):\n",
    "    token = re.sub(r'^\\d+$', \"number\", token)\n",
    "    return token\n",
    "\n",
    "def stopwords(token):\n",
    "    token = re.sub(r'^z+$', '', token)\n",
    "    return token"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[nltk_data] Downloading package punkt to\n",
      "[nltk_data]     C:\\Users\\syedrusyaidi\\AppData\\Roaming\\nltk_data...\n",
      "[nltk_data]   Package punkt is already up-to-date!\n",
      "[nltk_data] Downloading package stopwords to\n",
      "[nltk_data]     C:\\Users\\syedrusyaidi\\AppData\\Roaming\\nltk_data...\n",
      "[nltk_data]   Package stopwords is already up-to-date!\n",
      "[nltk_data] Downloading package wordnet to\n",
      "[nltk_data]     C:\\Users\\syedrusyaidi\\AppData\\Roaming\\nltk_data...\n",
      "[nltk_data]   Package wordnet is already up-to-date!\n"
     ]
    }
   ],
   "source": [
    "# tokenization\n",
    "import nltk\n",
    "\n",
    "from nltk.tokenize import word_tokenize\n",
    "from nltk.stem.wordnet import WordNetLemmatizer\n",
    "from nltk.corpus import stopwords, words\n",
    "\n",
    "nltk.download('punkt')\n",
    "nltk.download('stopwords')\n",
    "nltk.download('wordnet')\n",
    "\n",
    "stop_words = stopwords.words(\"english\")\n",
    "lemmatizer = WordNetLemmatizer()\n",
    "\n",
    "def preprocessing(text):\n",
    "    text = regex(text)\n",
    "    tokens = word_tokenize(text)\n",
    "    tokens = [lemmatizer.lemmatize(word) for word in tokens if word not in stop_words]\n",
    "    # tokens = [word if dict_enchant.check(word) else dict_enchant.suggest(word)[0] for word in tokens]\n",
    "    # tokens = [word for word in tokens if dict_enchant.check(word)]\n",
    "    tokens = [word for word in tokens if len(rmdigit(word))>0]\n",
    "    # tokens = [word for word in tokens if len(stopwords(word))>0]\n",
    "    return tokens"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [],
   "source": [
    "import sklearn\n",
    "from sklearn.model_selection import train_test_split\n",
    "# preparation for data modeling\n",
    "X = df_new.X.values\n",
    "y = df_new.overall_ans.values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Wall time: 6.09 s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "from sklearn.feature_extraction.text import CountVectorizer, TfidfTransformer\n",
    "from sklearn.metrics import confusion_matrix\n",
    "\n",
    "# vectorise.fit(X_train[30:40])\n",
    "# len(vectorise.vocabulary_)\n",
    "# vectorise.vocabulary_\n",
    "\n",
    "vect = CountVectorizer(tokenizer=preprocessing)\n",
    "# vect = CountVectorizer()\n",
    "tfidf = TfidfTransformer()\n",
    "\n",
    "# train classifier\n",
    "X = vect.fit_transform(X)\n",
    "X = tfidf.fit_transform(X)\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.datasets import make_classification\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.datasets import make_blobs\n",
    "logreg = LogisticRegression()\n",
    "logreg.fit(X_train,y_train)\n",
    "#y_pred=logreg.predict(X_test)\n",
    "y_pred_adj = (logreg.predict_proba(X_test) >= 0.2)\n",
    "y_pred_adj = y_pred_adj[:, 1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.97      0.99      0.98      2177\n",
      "           1       0.88      0.61      0.72       145\n",
      "\n",
      "    accuracy                           0.97      2322\n",
      "   macro avg       0.93      0.80      0.85      2322\n",
      "weighted avg       0.97      0.97      0.97      2322\n",
      "\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import classification_report\n",
    "#print(classification_report(y_test,y_pred))\n",
    "print(classification_report(y_test, y_pred_adj))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[False False  True ... False False False]\n"
     ]
    }
   ],
   "source": [
    "print(y_pred_adj)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[2165   12]\n",
      " [  56   89]]\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import confusion_matrix\n",
    "confusion_matrix = confusion_matrix(y_test, y_pred_adj)\n",
    "print(confusion_matrix)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.metrics import roc_auc_score\n",
    "from sklearn.metrics import roc_curve\n",
    "logit_roc_auc = roc_auc_score(y_test, logreg.predict(X_test))\n",
    "fpr, tpr, thresholds = roc_curve(y_test, logreg.predict_proba(X_test)[:,1])\n",
    "plt.figure()\n",
    "plt.plot(fpr, tpr, label='Logistic Regression (area = %0.2f)' % logit_roc_auc)\n",
    "plt.plot([0, 1], [0, 1],'r--')\n",
    "plt.xlim([0.0, 1.0])\n",
    "plt.ylim([0.0, 1.05])\n",
    "plt.xlabel('False Positive Rate')\n",
    "plt.ylabel('True Positive Rate')\n",
    "plt.title('Cyberbully Words Classifier')\n",
    "plt.legend(loc=\"lower right\")\n",
    "plt.savefig('Log_ROC')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}

word,count,severity
annoying,1,3
annoying,2,3
annoying,3,2
ass,1,3
asshole,1,3
asshole,2,3
asshole,3,3
asshole,4,3
ballfuck,1,3
bitch,1,3
bitch,2,3
bitch,3,3
bitch,4,3
bitch,5,3
bitch,6,3
bitch,7,3
bitch,8,3
bitch,9,3
bitch,10,3
bitch,11,3
bitch,12,3
bitch,13,2
bitch,14,2
bitch,15,2
bitch,16,2
bitch,17,2
boob,1,2
boob,2,3
boobyhead,1,3
bullshit,1,2
bullshit,2,2
bumcrack,1,3
butt,1,3
buttfuck,1,3
damn,1,3
damn,2,2
dick,1,3
dick,2,3
dick,3,3
dick,4,3
dick,5,3
dick,6,3
dick,7,3
dick,8,3
dirty,1,3
dirty,2,3
douchebag,1,3
dumb,1,3
dumb,2,3
dumb,3,3
dumb,4,2
dumb,5,2
dumb,6,2
dumbass,1,3
dumbshit,1,3
dummy,1,3
fake,1,3
fake,2,3
fake,3,3
fake,4,3
fake,5,2
fat,1,3
fat,2,3
fat,3,3
fat,4,2
fatherfuck,1,3
fuck,1,3
fuck,2,3
fuck,3,3
fuck,4,3
fuck,5,3
fuck,6,3
fuck,7,3
fuck,8,3
fuck,9,3
fuck,10,3
fuck,11,3
fuck,12,3
fuck,13,3
fuck,14,3
fuck,15,3
fuck,16,3
fuck,17,3
fuck,18,3
fuck,19,3
fuck,20,3
fuck,21,3
fuck,22,2
fuck,23,2
fuck,24,2
fuck,25,2
fuck,26,2
fuck,27,2
fuck,28,2
gay,1,3
gay,2,3
gay,3,3
gay,4,3
gay,5,3
gay,6,2
gay,7,2
gross,1,3
hairy,1,2
hate,1,2
homo,1,3
idiot,1,3
ill,1,3
iloveyourpenis,1,3
immature,1,3
jerk,1,3
jerk,2,2
kill,1,2
lame,1,3
lame,2,2
midget,1,2
nasty,1,3
nasty,2,3
nasty,3,3
nasty,4,3
nasty,5,3
nerd,1,3
nigger,1,3
nigger,2,3
nigger,3,2
nipple,1,3
pathetic,1,3
pathetic,2,3
pathetic,3,2
pedophile,1,3
pedophile,2,2
penis,1,3
pimp,1,3
pussy,1,3
pussy,2,3
pussy,3,3
pussy,4,3
rape,1,3
rape,2,2
retard,1,2
sex,1,3
shit,1,3
shit,2,3
shit,3,3
shit,4,3
shit,5,3
shit,6,3
skank,1,3
skinny,1,3
slut,1,3
slut,2,3
slut,3,3
slut,4,3
slut,5,3
stfu,1,3
stfu,2,3
stfu,3,3
stfu,4,3
stfu,5,3
stfu,6,3
stupid,1,3
stupid,2,3
stupid,3,3
stupid,4,2
stupid,5,2
suck,1,3
suck,2,2
tit,1,3
tit,2,3
ugly,1,3
ugly,2,3
ugly,3,3
ugly,4,3
ugly,5,3
ugly,6,3
ugly,7,2
ugly,8,2
ugly,9,2
vagina,1,3
wank,1,2
whore,1,3
whore,2,3
whore,3,3
whore,4,3
whore,5,3
whore,6,3
whore,7,2
whore,8,2
wtf,1,3
wtf,2,3
wtf,3,3
wtf,4,3
wtf,5,3
wtf,6,3
wtf,7,2

